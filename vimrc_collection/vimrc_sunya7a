" Remap leader key
let mapleader=','

" Set no compativility with vi
set nocompatible

""" Moving Around/Editing
set cursorline              " have a line indicate the cursor location
set ruler                   " show the cursor position all the time
set nostartofline           " Avoid moving cursor to BOL when jumping around
set virtualedit=block       " Let cursor move past the last char in <C-v> mode
set scrolloff=3             " Keep 3 context lines above and below the cursor
set backspace=2             " Allow backspacing over autoindent, EOL, and BOL
set showmatch               " Briefly jump to a paren once it's balanced
set nowrap                  " don't wrap text
set linebreak               " don't wrap textin the middle of a word
set autoindent              " always set autoindenting on
set smartindent             " use smart indent if there is no indent file
set tabstop=4               " <tab> inserts 4 spaces 
set shiftwidth=4            " but an indent level is 2 spaces wide.
set softtabstop=4           " <BS> over an autoindent deletes both spaces.
set expandtab               " Use spaces, not tabs, for autoindent/tab key.
set shiftround              " rounds indent to a multiple of shiftwidth
set matchpairs+=<:>         " show matching <> (html mainly) as well
set foldmethod=indent       " allow us to fold on indents
set foldlevel=99            " don't fold by default

"""" Messages, Info, Status
set confirm                 " Y-N-C prompt if closing with unsaved changes.
set ls=2                    " allways show status line
set showcmd                 " Show incomplete normal mode commands as I type.
set report=0                " : commands always print changed line count.
set laststatus=2            " Always show statusline, even if only 1 window.


" ==========================================================
" Pathogen - Allows us to organize our vim plugins
" ==========================================================
" Load pathogen with docs for all plugins
execute pathogen#infect()

" Window Splits
map <c-j> <c-w>j
map <c-k> <c-w>k
map <c-l> <c-w>l
map <c-h> <c-w>h
" and lets make these all work in insert mode too
" <C-O> makes next cmd happen as if in command mode
imap <C-W> <C-O><C-W>

" Task Lists
map <leader>td <Plug>TaskList

" Revision History
map <leader>g :GundoToggle<CR>

""" Syntax Highlighting and Validation
syntax on
filetype on
filetype plugin indent on

" Pep8
let g:pep8_map='<leader>8'

" Tab Completion and Documentation
au FileType python set omnifunc=pythoncomplete#Complete
au FileType python setlocal expandtab shiftwidth=4 tabstop=8 softtabstop=4 smartindent cinwords=if,elif,else,for,while,try,except,finally,def,class,with
set completeopt=menuone,longest,preview

""" Code Navigation
" Buffers
nmap } :bnext<CR>
nmap { :bprevious<CR>

" File Browser
map <leader>n :NERDTreeToggle<CR>

" Refactoring and Go to definition
map <leader>j :RopeGotoDefinition<CR>
map <leader>r :RopeRename<CR>

" Searching
nmap <leader>a <Esc>:Ack!

" Show git branch in statusline
set statusline=[%l,%v\ %P%M]\ %f\ %r%h%w\ (%{&ff})\ %{fugitive#statusline()}

""" Virtualenv
" Vim cannot tell whether we are working in a virtualenv
" The code below fixes this by adding the virtualenv's site-packages to the vim path
py << EOF
import os.path
import sys
import vim
if 'VIRTUALENV' in os.environ:
    project_base_dir = os.environ['VIRTUAL_ENV']
    sys.path.insert(0, project_base_dir)
    activate_this = os.path.join(project_base_dir, 'bin/activate_this.py')
    execfile(activate_this, dict(__file__=activate_this))
EOF

" Load up virtualenv's vimrc if it exists
if filereadable($VIRTUAL_ENV . '/.vimrc')
    source $VIRTUAL_ENV/.vimrc
endif
